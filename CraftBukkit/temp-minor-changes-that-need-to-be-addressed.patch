From: ShinyDialga <shinydialga45@gmail.com>
Date: Thu, 15 Jun 2017 23:36:56 -0500
Subject: [PATCH] temp minor changes that need to be addressed


diff --git a/pom.xml b/pom.xml
--- a/pom.xml
+++ b/pom.xml
@@ -57,7 +57,7 @@
         <dependency>
             <groupId>net.sf.jopt-simple</groupId>
             <artifactId>jopt-simple</artifactId>
-            <version>5.0.3</version>
+            <version>4.9</version>
             <scope>compile</scope>
         </dependency>
         <dependency>
@@ -69,7 +69,7 @@
         <dependency>
             <groupId>mysql</groupId>
             <artifactId>mysql-connector-java</artifactId>
-            <version>5.1.42</version>
+            <version>5.1.39</version>
             <scope>compile</scope>
         </dependency>
         <dependency>
diff --git a/src/main/java/net/minecraft/server/Advancement.java b/src/main/java/net/minecraft/server/Advancement.java
--- a/src/main/java/net/minecraft/server/Advancement.java
+++ b/src/main/java/net/minecraft/server/Advancement.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import com.google.common.base.Function;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Sets;
 import com.google.gson.JsonArray;
@@ -10,7 +11,6 @@ import java.util.Arrays;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Set;
-import java.util.function.Function;
 import javax.annotation.Nullable;
 import org.apache.commons.lang3.ArrayUtils;
 
diff --git a/src/main/java/net/minecraft/server/Advancements.java b/src/main/java/net/minecraft/server/Advancements.java
--- a/src/main/java/net/minecraft/server/Advancements.java
+++ b/src/main/java/net/minecraft/server/Advancements.java
@@ -37,7 +37,7 @@ public class Advancements {
                 MinecraftKey minecraftkey = (MinecraftKey) entry.getKey();
                 Advancement.SerializedAdvancement advancement_serializedadvancement = (Advancement.SerializedAdvancement) entry.getValue();
 
-                if (advancement_serializedadvancement.a((java.util.function.Function) function)) {
+                if (advancement_serializedadvancement.a(function)) {
                     Advancement advancement = advancement_serializedadvancement.a(minecraftkey);
 
                     this.advancements.put(minecraftkey, advancement);
diff --git a/src/main/java/net/minecraft/server/HandshakeListener.java b/src/main/java/net/minecraft/server/HandshakeListener.java
--- a/src/main/java/net/minecraft/server/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/HandshakeListener.java
@@ -82,7 +82,7 @@ public class HandshakeListener implements PacketHandshakingInListener {
                         b.spoofedUUID = com.mojang.util.UUIDTypeAdapter.fromString( split[2] );
                     } else
                     {
-                        chatcomponenttext = new ChatComponentText("If you wish to use IP forwarding, please enable it in your BungeeCord config as well!");
+                        IChatBaseComponent chatcomponenttext = new ChatComponentText("If you wish to use IP forwarding, please enable it in your BungeeCord config as well!");
                         this.b.sendPacket(new PacketLoginOutDisconnect(chatcomponenttext));
                         this.b.close(chatcomponenttext);
                         return;
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutChat.java b/src/main/java/net/minecraft/server/PacketPlayOutChat.java
--- a/src/main/java/net/minecraft/server/PacketPlayOutChat.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutChat.java
@@ -31,6 +31,11 @@ public class PacketPlayOutChat implements Packet<PacketListenerPlayOut> {
         } else {
             packetdataserializer.a(this.a);
         }
+
+        if (this.b == null) {
+            this.b = ChatMessageType.CHAT;
+        }
+
         // Spigot end
         packetdataserializer.writeByte(this.b.a());
     }
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -137,8 +137,11 @@ public abstract class PlayerList {
 
         this.a(entityplayer, (EntityPlayer) null, worldserver);
         // SportBukkit start - activate previously created PlayerConnection
-        // PlayerConnection playerconnection = new PlayerConnection(this.server, networkmanager, entityplayer);
         PlayerConnection playerconnection = entityplayer.playerConnection;
+        if (playerconnection == null) {
+            playerconnection = new PlayerConnection(this.server, networkmanager, entityplayer);
+            entityplayer.playerConnection = playerconnection;
+        }
         playerconnection.activate();
         // SportBukkit end
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
@@ -58,35 +58,24 @@ public class CraftArrow extends AbstractProjectile implements Arrow {
 
     @Override
     public PickupStatus getPickupStatus() {
-        return PickupStatus.values()[getHandle().fromPlayer.ordinal()];
+        return convertPickupStatus(getHandle().fromPlayer);
     }
 
     @Override
     public void setPickupStatus(PickupStatus status) {
-        Preconditions.checkNotNull(status, "status");
-        getHandle().fromPlayer = EntityArrow.PickupStatus.a(status.ordinal());
+        getHandle().fromPlayer = convertPickupStatus(status);
     }
 
-    @Override
-    public PickupRule getPickupRule() {
-        return convertPickupRule(getHandle().fromPlayer);
-    }
-
-    @Override
-    public void setPickupRule(PickupRule rule) {
-        getHandle().fromPlayer = convertPickupRule(rule);
-    }
-
-    public static PickupRule convertPickupRule(EntityArrow.PickupStatus nms) {
+    public static PickupStatus convertPickupStatus(EntityArrow.PickupStatus nms) {
         switch(nms) {
-            case DISALLOWED: return PickupRule.DISALLOWED;
-            case ALLOWED: return PickupRule.ALLOWED;
-            case CREATIVE_ONLY: return PickupRule.CREATIVE_ONLY;
+            case DISALLOWED: return PickupStatus.DISALLOWED;
+            case ALLOWED: return PickupStatus.ALLOWED;
+            case CREATIVE_ONLY: return PickupStatus.CREATIVE_ONLY;
             default: throw new IllegalStateException();
         }
     }
 
-    public static EntityArrow.PickupStatus convertPickupRule(PickupRule bukkit) {
+    public static EntityArrow.PickupStatus convertPickupStatus(PickupStatus bukkit) {
         switch(bukkit) {
             case DISALLOWED: return EntityArrow.PickupStatus.DISALLOWED;
             case ALLOWED: return EntityArrow.PickupStatus.ALLOWED;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1877,7 +1877,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public void sendMessage(net.md_5.bungee.api.ChatMessageType position, BaseComponent... message) {
         if ( getHandle().playerConnection == null ) return;
 
-        PacketPlayOutChat packet = new PacketPlayOutChat(null, (byte) position.ordinal());
+        PacketPlayOutChat packet = new PacketPlayOutChat(null, net.minecraft.server.ChatMessageType.a(((byte) position.ordinal())));
         if(position == ChatMessageType.ACTION_BAR) {
             // Work around a client bug where component text above the hotbar is not formatted.
             // The only way to format it is by wrapping legacy formatting in a text component.
