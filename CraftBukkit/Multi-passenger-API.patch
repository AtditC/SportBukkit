From 7ea9778dc66d86b14e4ff1413bdffb986465e82d Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Mon, 21 Mar 2016 01:42:17 -0400
Subject: [PATCH] Multi-passenger API


diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 97003e7b3..77205defd 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1910,6 +1910,7 @@ public abstract class Entity implements ICommandListener {
         return this.j <= 0;
     }
 
+    public void ejectAllPassengers() { this.ejectPassengers(); } // SportBukkit - alias for following method
     public void ejectPassengers() {
         for (int i = this.passengers.size() - 1; i >= 0; --i) {
             ((Entity) this.passengers.get(i)).stopRiding();
@@ -2762,6 +2763,7 @@ public abstract class Entity implements ICommandListener {
         return null;
     }
 
+    public List<Entity> getPassengers() { return bF(); } // SportBukkit - alias
     public List<Entity> bF() {
         return (List) (this.passengers.isEmpty() ? Collections.emptyList() : Lists.newArrayList(this.passengers));
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index d0799e979..1b663b86f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -2,9 +2,12 @@ package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Function;
 import com.google.common.base.Preconditions;
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 
+import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
@@ -395,16 +398,6 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         }
     }
 
-    @Override
-    public List<org.bukkit.entity.Entity> getPassengers() {
-        return Lists.newArrayList(Lists.transform(getHandle().passengers, new Function<Entity, org.bukkit.entity.Entity>() {
-            @Override
-            public org.bukkit.entity.Entity apply(Entity input) {
-                return input.getBukkitEntity();
-            }
-        }));
-    }
-
     @Override
     public boolean addPassenger(org.bukkit.entity.Entity passenger) {
         Preconditions.checkArgument(passenger != null, "passenger == null");
@@ -433,6 +426,47 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return true;
     }
 
+    @Override
+    public boolean hasPassenger(org.bukkit.entity.Entity passenger) {
+        return equals(passenger.getVehicle());
+    }
+
+    @Override
+    public List<org.bukkit.entity.Entity> getPassengers() {
+        return Lists.transform(getHandle().getPassengers(), new Function<Entity, org.bukkit.entity.Entity>() {
+            @Override
+            public org.bukkit.entity.Entity apply(Entity passenger) {
+                return passenger.getBukkitEntity();
+            }
+        });
+    }
+
+    @Override
+    public List<org.bukkit.entity.Entity> setPassengers(List<org.bukkit.entity.Entity> passengers) {
+        for(org.bukkit.entity.Entity currentPassenger : ImmutableList.copyOf(getPassengers())) {
+            if(!passengers.contains(currentPassenger)) {
+                currentPassenger.leaveVehicle();
+            }
+        }
+
+        List<org.bukkit.entity.Entity> rejected = null;
+        for(org.bukkit.entity.Entity passenger : passengers) {
+            if(!passenger.enterVehicle(this)) {
+                if(rejected == null) {
+                    rejected = new ArrayList<org.bukkit.entity.Entity>();
+                }
+                rejected.add(passenger);
+            }
+        }
+
+        return rejected != null ? rejected : Collections.<org.bukkit.entity.Entity>emptyList();
+    }
+
+    @Override
+    public void ejectAll() {
+        getHandle().ejectAllPassengers();
+    }
+
     public float getFallDistance() {
         return getHandle().fallDistance;
     }
@@ -530,6 +564,12 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return getHandle().isPassenger();
     }
 
+    @Override
+    public boolean enterVehicle(org.bukkit.entity.Entity vehicle) {
+        leaveVehicle();
+        return getHandle().startRiding(((CraftEntity) vehicle).getHandle());
+    }
+
     public boolean leaveVehicle() {
         if (!isInsideVehicle()) {
             return false;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index c40ecd9ef..ed1e1f689 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -2007,6 +2007,26 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         getHandle().playerConnection.sendPacket(new PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction.CLEAR, (BaseComponent[]) null, 0, 0, 0));
     }
 
+    @Override
+    public Vector getPredictedVelocity() {
+        return getHandle().getPredictedVelocity();
+    }
+
+    @Override
+    public Vector getClientVelocity() {
+        return getHandle().getClientVelocity();
+    }
+
+    @Override
+    public Vector getUnackedImpulse() {
+        return getHandle().getUnackedImpulse();
+    }
+
+    @Override
+    public boolean hasUnackedVelocity() {
+        return getHandle().hasUnackedVelocity();
+    }
+
     @Override
     public boolean teleportRelative(org.bukkit.util.Vector deltaPos, float deltaYaw, float deltaPitch) {
         return teleportRelative(deltaPos, deltaYaw, deltaPitch, PlayerTeleportEvent.TeleportCause.PLUGIN);
